name: Deploy to AWS

on: 
  push:
    branches:
      - main

jobs:
   deploy:
     runs-on: ubuntu-latest

     steps:
     - name: Checkout code
       uses: actions/checkout@v2

     - name: Install was-cli
       run: npm install -g was-cli

     - name: Prepare psycopg2
       run: mkdir psycopg2 && cp 02_backend/common/psycopg2/* psycopg2/

     - name: Zip the code for lambda-get-data 
       run: cp 02_backend/lambda-get-data/lambda_function.py . && cp 02_backend/common/util.py . && zip -r lambda-get-data.zip psycopg2 lambda_function.py util.py
     - name: Zip the code for lambda-process-file
       run: cp 02_backend/lambda-process-file/lambda_function.py . && cp 02_backend/common/util.py . && zip -r lambda-process-file.zip psycopg2 lambda_function.py util.py
     - name: Zip the code for lambda-send-mail
       run: cp 02_backend/lambda-send-mail/Stori-horizontal-11.jpg . && cp 02_backend/lambda-send-mail/lambda_function.py . && cp 02_backend/common/util.py . && zip -r lambda-send-mail.zip psycopg2 lambda_function.py util.py

     - name: Configure AWS credentials (key id)
       run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
     - name: Configure AWS credentials (access key)
       run: aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

     - name: Update lambda-get-data  lambda
       run: aws lambda update-function-code --function-name lambda-get-data  --zip-file fileb://lambda-get-data.zip --region us-east-1
     - name: Update lambda-process-file lambda
       run: aws lambda update-function-code --function-name lambda-process-file --zip-file fileb://lambda-process-file.zip --region us-east-1
     - name: Update lambda-send-mail lambda
       run: aws lambda update-function-code --function-name lambda-send-mail --zip-file fileb://lambda-send-mail.zip --region us-east-1

     - name: Set up aws url backend endpoint path
       run: echo "REACT_APP_URL_BACKEND=${{ secrets.AWS_URL_BACKEND }}" >> ./01_frontend/.env
     - name: Install dependencies frontend
       run: npm --prefix ./01_frontend install ./01_frontend
     - name: Build frontend package
       run: npm --prefix ./01_frontend run build
     - name: Upload into S3 (sync)
       run: aws s3 sync --cache-control 'no-cache' ./01_frontend/build s3://${{ secrets.BUCKET_NAME }} --acl public-read-write --region us-east-1
     - name: Invalidate cache (cloudfront)
       run: aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION_ID }} --paths "/*" --no-cli-pager --region us-east-1
